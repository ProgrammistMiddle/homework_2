
import numpy as np
import timeit
import time

print('Задача 1')
'''
Подгрузите файл train_vector_1.csv с помощью функции np.loadtxt. Назовите подгруженный массив my_array. Убедитесь, что подгруженный массив имеет тип np.ndarray'''
my_array = np.loadtxt('train_vector_1.csv')
print(my_array)
print('type(my_array):', type(my_array))

print('Задача 2')
'''
Напишите код, который считает среднее значение всех элементов массива (без использования встроенных функций np.mean и т.д.)

Примените ее к подгруженному массиву my_array
Преобразуйте массив my_array в список, сохраните его в переменной my_list
Примените функцию к списку my_list
Сравните производительность по времени написанного вами кода в зависимости от типа данных (список и np.array), для этого используйте %%timeit'''
	
def mean_value(arg):
	count=0
	sum=0
	for i in arg:
		count +=1
		sum +=i
	return  round(sum/count)
	
print('mean my_array:',mean_value(my_array))
timeit_my_array=timeit.timeit("mean_value(my_array)", setup="from __main__ import mean_value, my_array", number=10)
print('timeit_my_array:', timeit_my_array)		
my_list = list(my_array)
print('mean my_list:', mean_value(my_list))
timeit_my_list=timeit.timeit("mean_value(my_list)", setup="from __main__ import mean_value, my_list", number=10)
print('timeit_my_list:', timeit_my_list)

print ('different_timeit my_array and my_list:', timeit_my_array-timeit_my_list)


print('Задача 3')
'''
Подгрузите файл **iris.csv** с помощью встроенной функции **np.loadtxt**. Назовите его my_2d_array. Напиишите код, который считает сумму элементов массива по столбцам. '''

my_2d_array = np.loadtxt('iris.csv',skiprows=1, delimiter =',' )
print(my_2d_array)

list_sum=[]
sum= 0
num=[i for i in range(len(my_2d_array[0]))]

for y in num:
	for  i in my_2d_array[:,y]:
		sum +=i
	list_sum.append(round(sum,1))
	sum=0
print(list_sum)

print('Задача 4')
'''
* транспонируйте my_2d_array
* выполните матричное умножение my_2d_array на my_2d_array.T
* выполните матричное умножение my_2d_array.T на my_2d_array
'''
#* транспонируйте my_2d_array
print (my_2d_array[0,:].size)
print( my_2d_array[:,1])
T =[]
for i in range(my_2d_array[0,:].size):
	T.append(my_2d_array[:,i])
T=np.array(T)
print(T)


#* выполните матричное умножение my_2d_array на my_2d_array.T

sum=0
sum_array=[]

for x in range(T[0,:].size):
	sum_list =[]
	for y in range(T[0,:].size):
#		print()
		if y<3:
			for i in range(my_2d_array[0,0:].size):	
#				print(my_2d_array[x,i], T[i,y])
				sum+=my_2d_array[x,i]*T[i,y]
			sum_list.append(round(sum,2))
			sum=0	
		elif y>=147 :
			if y==147:
				sum_list.append('...')
			for i in range(my_2d_array[0,0:].size):	
				sum+=my_2d_array[x,i]*T[i,y]
			sum_list.append(round(sum,2))
			sum=0				
	sum_array.append(sum_list)	
	
print(np.array(sum_array))

#my_2d_array_T=my_2d_array.T
#print(my_2d_array.dot(my_2d_array_T))
#print('s',my_2d_array[1,1:])
#print(T[1:,0])


#* выполните матричное умножение my_2d_array.T на my_2d_array

sum=0
sum_array=[]

for x in range(1,my_2d_array[0,:].size):
	sum_list=[]
	for y in range(1,my_2d_array[0,:].size):
		for i in range(T[0].size):
			sum+=T[x,i] * my_2d_array[i,y]
		sum_list.append(round(sum,2))
		sum=0
	sum_array.append(sum_list)
print(np.array(sum_array))


print('Задача 5')
'''
Напишите код, который вычисляет значение следующей математической функции в зависимости от переменной х, где х - вектор

F(x) = 1/25AA^Tx + Bx + 5c

* Создайте матрицы A и B размера 4 на 4, состоящие из случайных целых чисел в интервале от 1 до 10 (используйте соответствующую функцию модуля np.random)
* Создайте вектора х и с размера 4, состоящие из случайных целых чисел в интервале от 1 до 5'''

A = np.random.randint(1,11, (4, 4))
B = np.random.randint(1,11, (4, 4))
x= np.random.randint(1,6, (4))
c= np.random.randint(1,6, (4))
print('A:', A, 'B:', B , 'x:',x, 'c:', c, sep='\n')
F= 1/25*A.dot(A.T).dot(x)+B.dot(x)+5*c
